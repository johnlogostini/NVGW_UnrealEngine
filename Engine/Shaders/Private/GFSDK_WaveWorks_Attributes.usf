/*
 * This code contains NVIDIA Confidential Information and is disclosed
 * under the Mutual Non-Disclosure Agreement.
 *
 * Notice
 * ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS" NVIDIA MAKES
 * NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
 * THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF NONINFRINGEMENT,
 * MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * NVIDIA Corporation assumes no responsibility for the consequences of use of such
 * information or for any infringement of patents or other rights of third parties that may
 * result from its use. No license is granted by implication or otherwise under any patent
 * or patent rights of NVIDIA Corporation. No third party distribution is allowed unless
 * expressly authorized by NVIDIA.  Details are subject to change without notice.
 * This code supersedes and replaces all information previously supplied.
 * NVIDIA Corporation products are not authorized for use as critical
 * components in life support devices or systems without express written approval of
 * NVIDIA Corporation.
 *
 * Copyright ?2008- 2016 NVIDIA Corporation. All rights reserved.
 *
 * NVIDIA Corporation and its licensors retain all intellectual property and proprietary
 * rights in and to this software and related documentation and any modifications thereto.
 * Any use, reproduction, disclosure or distribution of this software and related
 * documentation without an express license agreement from NVIDIA Corporation is
 * strictly prohibited.
 */

 /**
  * WaveWorks.usf: Code for WaveWorks
  */

#define SampleTex2D(nv_waveworks_comm0,nv_waveworks_comm1,nv_waveworks_comm2) nv_waveworks_comm0.Sample(nv_waveworks_comm1,nv_waveworks_comm2)
#define SampleTex2Dlod(nv_waveworks_comm0,nv_waveworks_comm1,nv_waveworks_comm2,nv_waveworks_comm3) nv_waveworks_comm0.SampleLevel(nv_waveworks_comm1,nv_waveworks_comm2,nv_waveworks_comm3)

  // Displacement
cbuffer nv_waveworks_attr0
{
	float3 nv_waveworks_attr1;
	float nv_waveworks_attr3;
	float4 nv_waveworks_attr4;
};

sampler nv_waveworks_attr5; texture2D nv_waveworks_attr6;
sampler nv_waveworks_attr7; texture2D nv_waveworks_attr8;
sampler nv_waveworks_attr9; texture2D nv_waveworks_attr10;
sampler nv_waveworks_attr11; texture2D nv_waveworks_attr12;

// PS
cbuffer nv_waveworks_attr15
{
	float nv_waveworks_attr16;
	float nv_waveworks_attr17;
	float nv_waveworks_attr18;
	float nv_waveworks_attr19;
	float nv_waveworks_attr20;
	float nv_waveworks_attr21;
	float nv_waveworks_attr22;
	float nv_waveworks_attr23;
	float nv_waveworks_attr24;
	float nv_waveworks_attr25;
};

sampler nv_waveworks_attr26; texture2D nv_waveworks_attr27;
sampler nv_waveworks_attr28; texture2D nv_waveworks_attr29;
sampler nv_waveworks_attr30; texture2D nv_waveworks_attr31;
sampler nv_waveworks_attr32; texture2D nv_waveworks_attr33;

struct GFSDK_WAVEWORKS_INTERPOLATED_VERTEX_OUTPUT
{
	float4 nv_waveworks_attr36;
	float4 nv_waveworks_attr37;
	float4 nv_waveworks_attr38;
	float3 nv_waveworks_attr39;
};
struct GFSDK_WAVEWORKS_VERTEX_OUTPUT
{
	GFSDK_WAVEWORKS_INTERPOLATED_VERTEX_OUTPUT interp;
	float3 pos_world;
	float3 pos_world_undisplaced;
	float3 world_displacement;
};
GFSDK_WAVEWORKS_VERTEX_OUTPUT GFSDK_WaveWorks_GetDisplacedVertex(float3 InPosition)
{
	float3 nv_waveworks_attr40 = InPosition;
	float  nv_waveworks_attr41 = length(nv_waveworks_attr1 - nv_waveworks_attr40);
	float2 nv_waveworks_attr42 = nv_waveworks_attr40.xy * nv_waveworks_attr4.x;
	float2 nv_waveworks_attr43 = nv_waveworks_attr40.xy * nv_waveworks_attr4.y;
	float2 nv_waveworks_attr44 = nv_waveworks_attr40.xy * nv_waveworks_attr4.z;
	float2 nv_waveworks_attr45 = nv_waveworks_attr40.xy * nv_waveworks_attr4.w;
	float4 nv_waveworks_attr46;
	float4 nv_waveworks_attr47 = 1.0 / nv_waveworks_attr4.xyzw;
	nv_waveworks_attr46.x = 1.0;
	nv_waveworks_attr46.yzw = saturate(0.25*(nv_waveworks_attr47.yzw*24.0 - nv_waveworks_attr41) / nv_waveworks_attr47.yzw);
	nv_waveworks_attr46.yzw *= nv_waveworks_attr46.yzw;
#if defined(GFSDK_WAVEWORKS_GL)
	float3 nv_waveworks_attr48;
	if (nv_waveworks_attr2 > 0)
	{
		nv_waveworks_attr48 = nv_waveworks_attr46.x * SampleTex2Dlod(nv_waveworks_attr14, nv_waveworks_attr13, vec3(nv_waveworks_attr42, 0.0), 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.y == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.y * SampleTex2Dlod(nv_waveworks_attr14, nv_waveworks_attr13, vec3(nv_waveworks_attr43, 1.0), 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.z == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.z * SampleTex2Dlod(nv_waveworks_attr14, nv_waveworks_attr13, vec3(nv_waveworks_attr44, 2.0), 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.w == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.w * SampleTex2Dlod(nv_waveworks_attr14, nv_waveworks_attr13, vec3(nv_waveworks_attr45, 3.0), 0).xyz;
	}
	else
	{
		nv_waveworks_attr48 = nv_waveworks_attr46.x * SampleTex2Dlod(nv_waveworks_attr6, nv_waveworks_attr5, nv_waveworks_attr42, 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.y == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.y * SampleTex2Dlod(nv_waveworks_attr8, nv_waveworks_attr7, nv_waveworks_attr43, 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.z == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.z * SampleTex2Dlod(nv_waveworks_attr10, nv_waveworks_attr9, nv_waveworks_attr44, 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.w == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.w * SampleTex2Dlod(nv_waveworks_attr12, nv_waveworks_attr11, nv_waveworks_attr45, 0).xyz;
	}
#else
	float3 nv_waveworks_attr48 = nv_waveworks_attr46.x * SampleTex2Dlod(nv_waveworks_attr6, nv_waveworks_attr5, nv_waveworks_attr42, 0).xyz;
	nv_waveworks_attr48 += nv_waveworks_attr46.y == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.y * SampleTex2Dlod(nv_waveworks_attr8, nv_waveworks_attr7, nv_waveworks_attr43, 0).xyz;
	nv_waveworks_attr48 += nv_waveworks_attr46.z == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.z * SampleTex2Dlod(nv_waveworks_attr10, nv_waveworks_attr9, nv_waveworks_attr44, 0).xyz;
	nv_waveworks_attr48 += nv_waveworks_attr46.w == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.w * SampleTex2Dlod(nv_waveworks_attr12, nv_waveworks_attr11, nv_waveworks_attr45, 0).xyz;
#endif
	float3 nv_waveworks_attr49 = nv_waveworks_attr40 + nv_waveworks_attr48;
	GFSDK_WAVEWORKS_VERTEX_OUTPUT Output;
	Output.interp.nv_waveworks_attr39 = nv_waveworks_attr1 - nv_waveworks_attr49;
	Output.interp.nv_waveworks_attr36.xy = nv_waveworks_attr42;
	Output.interp.nv_waveworks_attr36.zw = nv_waveworks_attr43;
	Output.interp.nv_waveworks_attr37.xy = nv_waveworks_attr44;
	Output.interp.nv_waveworks_attr37.zw = nv_waveworks_attr45;
	Output.interp.nv_waveworks_attr38 = nv_waveworks_attr46;
	Output.pos_world = nv_waveworks_attr49 * 100.0;					// unit from 'm' to 'cm'
	Output.pos_world_undisplaced = nv_waveworks_attr40 * 100.0;		// unit from 'm' to 'cm'
	Output.world_displacement = nv_waveworks_attr48 * 100.0;		// unit from 'm' to 'cm'
	return Output;
}

GFSDK_WAVEWORKS_VERTEX_OUTPUT GFSDK_WaveWorks_GetDisplacedVertexAfterTessellation(float3 InPosition)
{
	float3 nv_waveworks_attr50 = InPosition;
	float3 nv_waveworks_attr40 = nv_waveworks_attr50;
	float4 nv_waveworks_attr46;
	float nv_waveworks_attr41 = length(nv_waveworks_attr1 - nv_waveworks_attr40);
	float4 nv_waveworks_attr47 = 1.0 / nv_waveworks_attr4.xyzw;
	nv_waveworks_attr46.x = 1.0;
	nv_waveworks_attr46.yzw = saturate(0.25*(nv_waveworks_attr47.yzw*24.0 - nv_waveworks_attr41) / nv_waveworks_attr47.yzw);
	nv_waveworks_attr46.yzw *= nv_waveworks_attr46.yzw;
	float2 nv_waveworks_attr42 = nv_waveworks_attr40.xy * nv_waveworks_attr4.x;
	float2 nv_waveworks_attr43 = nv_waveworks_attr40.xy * nv_waveworks_attr4.y;
	float2 nv_waveworks_attr44 = nv_waveworks_attr40.xy * nv_waveworks_attr4.z;
	float2 nv_waveworks_attr45 = nv_waveworks_attr40.xy * nv_waveworks_attr4.w;
#if defined(GFSDK_WAVEWORKS_GL)
	float3 nv_waveworks_attr48;
	if (nv_waveworks_attr2 > 0)
	{
		nv_waveworks_attr48 = nv_waveworks_attr46.x * SampleTex2Dlod(nv_waveworks_attr14, nv_waveworks_attr13, vec3(nv_waveworks_attr42, 0.0), 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.y == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.y * SampleTex2Dlod(nv_waveworks_attr14, nv_waveworks_attr13, vec3(nv_waveworks_attr43, 1.0), 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.z == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.z * SampleTex2Dlod(nv_waveworks_attr14, nv_waveworks_attr13, vec3(nv_waveworks_attr44, 2.0), 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.w == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.w * SampleTex2Dlod(nv_waveworks_attr14, nv_waveworks_attr13, vec3(nv_waveworks_attr45, 3.0), 0).xyz;
	}
	else
	{
		nv_waveworks_attr48 = nv_waveworks_attr46.x * SampleTex2Dlod(nv_waveworks_attr6, nv_waveworks_attr5, nv_waveworks_attr42, 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.y == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.y * SampleTex2Dlod(nv_waveworks_attr8, nv_waveworks_attr7, nv_waveworks_attr43, 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.z == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.z * SampleTex2Dlod(nv_waveworks_attr10, nv_waveworks_attr9, nv_waveworks_attr44, 0).xyz;
		nv_waveworks_attr48 += nv_waveworks_attr46.w == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.w * SampleTex2Dlod(nv_waveworks_attr12, nv_waveworks_attr11, nv_waveworks_attr45, 0).xyz;
	}
#else
	float3 nv_waveworks_attr48 = nv_waveworks_attr46.x * SampleTex2Dlod(nv_waveworks_attr6, nv_waveworks_attr5, nv_waveworks_attr42, 0).xyz;
	nv_waveworks_attr48 += nv_waveworks_attr46.y == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.y * SampleTex2Dlod(nv_waveworks_attr8, nv_waveworks_attr7, nv_waveworks_attr43, 0).xyz;
	nv_waveworks_attr48 += nv_waveworks_attr46.z == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.z * SampleTex2Dlod(nv_waveworks_attr10, nv_waveworks_attr9, nv_waveworks_attr44, 0).xyz;
	nv_waveworks_attr48 += nv_waveworks_attr46.w == 0 ? float3(0, 0, 0) : nv_waveworks_attr46.w * SampleTex2Dlod(nv_waveworks_attr12, nv_waveworks_attr11, nv_waveworks_attr45, 0).xyz;
#endif
	float3 nv_waveworks_attr49 = nv_waveworks_attr40 + nv_waveworks_attr48;
	GFSDK_WAVEWORKS_VERTEX_OUTPUT Output;
	Output.interp.nv_waveworks_attr39 = nv_waveworks_attr1 - nv_waveworks_attr49;
	Output.interp.nv_waveworks_attr36.xy = nv_waveworks_attr42;
	Output.interp.nv_waveworks_attr36.zw = nv_waveworks_attr43;
	Output.interp.nv_waveworks_attr37.xy = nv_waveworks_attr44;
	Output.interp.nv_waveworks_attr37.zw = nv_waveworks_attr45;
	Output.interp.nv_waveworks_attr38 = nv_waveworks_attr46;
	Output.pos_world = nv_waveworks_attr49 * 100.0;					// unit from 'm' to 'cm'
	Output.pos_world_undisplaced = nv_waveworks_attr40 * 100.0;		// unit from 'm' to 'cm'
	Output.world_displacement = nv_waveworks_attr48 * 100.0;		// unit from 'm' to 'cm'
	return Output;
}

struct GFSDK_WAVEWORKS_SURFACE_ATTRIBUTES
{
	float3 normal;
	float3 eye_dir;
	float foam_surface_folding;
	float foam_turbulent_energy;
	float foam_wave_hats;
};

GFSDK_WAVEWORKS_SURFACE_ATTRIBUTES GFSDK_WaveWorks_GetSurfaceAttributes(GFSDK_WAVEWORKS_INTERPOLATED_VERTEX_OUTPUT In)
{
	float3 nv_waveworks_attr51 = normalize(In.nv_waveworks_attr39);
	float4 nv_waveworks_attr52;
	float4 nv_waveworks_attr53;
	float4 nv_waveworks_attr54;
	float4 nv_waveworks_attr55;
#if defined(GFSDK_WAVEWORKS_GL)
	float3 nv_waveworks_attr48;
	if (nv_waveworks_attr2 > 0)
	{
		nv_waveworks_attr52 = SampleTex2D(nv_waveworks_attr35, nv_waveworks_attr34, vec3(In.nv_waveworks_attr36.xy, 0.0));
		nv_waveworks_attr53 = SampleTex2D(nv_waveworks_attr35, nv_waveworks_attr34, vec3(In.nv_waveworks_attr36.zw, 1.0));
		nv_waveworks_attr54 = SampleTex2D(nv_waveworks_attr35, nv_waveworks_attr34, vec3(In.nv_waveworks_attr37.xy, 2.0));
		nv_waveworks_attr55 = SampleTex2D(nv_waveworks_attr35, nv_waveworks_attr34, vec3(In.nv_waveworks_attr37.zw, 3.0));
	}
	else
	{
		nv_waveworks_attr52 = SampleTex2D(nv_waveworks_attr27, nv_waveworks_attr26, In.nv_waveworks_attr36.xy);
		nv_waveworks_attr53 = SampleTex2D(nv_waveworks_attr29, nv_waveworks_attr28, In.nv_waveworks_attr36.zw);
		nv_waveworks_attr54 = SampleTex2D(nv_waveworks_attr31, nv_waveworks_attr30, In.nv_waveworks_attr37.xy);
		nv_waveworks_attr55 = SampleTex2D(nv_waveworks_attr33, nv_waveworks_attr32, In.nv_waveworks_attr37.zw);
	}
#else
	nv_waveworks_attr52 = SampleTex2D(nv_waveworks_attr27, nv_waveworks_attr26, In.nv_waveworks_attr36.xy);
	nv_waveworks_attr53 = SampleTex2D(nv_waveworks_attr29, nv_waveworks_attr28, In.nv_waveworks_attr36.zw);
	nv_waveworks_attr54 = SampleTex2D(nv_waveworks_attr31, nv_waveworks_attr30, In.nv_waveworks_attr37.xy);
	nv_waveworks_attr55 = SampleTex2D(nv_waveworks_attr33, nv_waveworks_attr32, In.nv_waveworks_attr37.zw);
#endif
	float2 nv_waveworks_attr56;
	nv_waveworks_attr56.xy = nv_waveworks_attr52.xy*In.nv_waveworks_attr38.x +
		nv_waveworks_attr53.xy*In.nv_waveworks_attr38.y*nv_waveworks_attr18 +
		nv_waveworks_attr54.xy*In.nv_waveworks_attr38.z*nv_waveworks_attr21 +
		nv_waveworks_attr55.xy*In.nv_waveworks_attr38.w*nv_waveworks_attr24;
	float nv_waveworks_attr57 = 0.25;
	float nv_waveworks_attr58 =
		100.0*nv_waveworks_attr52.w *
		lerp(nv_waveworks_attr57, nv_waveworks_attr53.w, In.nv_waveworks_attr38.y)*
		lerp(nv_waveworks_attr57, nv_waveworks_attr54.w, In.nv_waveworks_attr38.z)*
		lerp(nv_waveworks_attr57, nv_waveworks_attr55.w, In.nv_waveworks_attr38.w);
	float nv_waveworks_attr59 =
		max(-100,
			(1.0 - nv_waveworks_attr52.z) +
			(1.0 - nv_waveworks_attr53.z) +
			(1.0 - nv_waveworks_attr54.z) +
			(1.0 - nv_waveworks_attr55.z));
	float3 nv_waveworks_attr60 = normalize(float3(nv_waveworks_attr56, nv_waveworks_attr16));
	float nv_waveworks_attr61 = 0.5;
	float nv_waveworks_attr62 =
		10.0*(-0.55 +
			(1.0 - nv_waveworks_attr52.z) +
			nv_waveworks_attr61*(1.0 - nv_waveworks_attr53.z) +
			nv_waveworks_attr61*nv_waveworks_attr61*(1.0 - nv_waveworks_attr54.z) +
			nv_waveworks_attr61*nv_waveworks_attr61*nv_waveworks_attr61*(1.0 - nv_waveworks_attr55.z));
	GFSDK_WAVEWORKS_SURFACE_ATTRIBUTES Output;
	Output.normal = nv_waveworks_attr60;
	Output.eye_dir = nv_waveworks_attr51;
	Output.foam_surface_folding = nv_waveworks_attr59;
	Output.foam_turbulent_energy = log(1.0 + nv_waveworks_attr58);
	Output.foam_wave_hats = nv_waveworks_attr62;
	return Output;
}

// textures resources used for shoreline
Texture2D ShorelineDistanceFieldTexture;
SamplerState ShorelineDistanceFieldSampler;

// get gerstner wave's vertex attributes
void GFSDK_WaveWorks_GetGerstnerVertexAttributes(
	float3		posWS,					// vertex's world position
	out float2	sdfUVOut,				// shoreline distance field UV
	out float3	offsetOut,				// offset for gerstner wave's vertex
	out float	gerstnerMultiplierOut,	// percent of gerstner displacement
	out float	distanceToShoreline		// distance to shoreline , range 0 - 1
	)
{	
	// initializing the outputs so we can exit early
	sdfUVOut = float2(0, 0);
	offsetOut = float3(0.0, 0.0, 0.0);
	gerstnerMultiplierOut = 0;
	distanceToShoreline = 1;

	// getting UV for fetching SDF texture
	float4 topDownPosition = mul(float4(posWS.xyz, 1), WaveWorksShorelineParameters.WorldToClip);
	float2 uv = mad(topDownPosition.xy / topDownPosition.w, 0.5f, 0.5f);
	uv.y = 1 - uv.y;

	// out of SDF texture
	if (uv.x < 0 || uv.x > 1 || uv.y < 0 || uv.y > 1)
	{
		return;
	}

	sdfUVOut = uv;
	posWS /= 100.0;	// unit from 'cm' to 'm'

	// getting shoreline distance field data
	const float4 tdData = Texture2DSampleLevel(ShorelineDistanceFieldTexture, ShorelineDistanceFieldSampler, uv, 0);
	distanceToShoreline = tdData.x;
	if (tdData.x >= 1.0)
	{
		return;
	}

	// initializing variables common to all Gerstner waves
	uint3 ShorelineDFTextureSize;
	ShorelineDistanceFieldTexture.GetDimensions(0, ShorelineDFTextureSize.x, ShorelineDFTextureSize.y, ShorelineDFTextureSize.z);

	float phaseShift = WaveWorksShorelineParameters.Time;	
	float kTopDownDataPixelsPerMeter = ShorelineDFTextureSize.x / WaveWorksShorelineParameters.ViewPortSize.x;
	float sdfPhase = tdData.x * WaveWorksShorelineParameters.MaxPixelsToShoreline / kTopDownDataPixelsPerMeter;
	float distanceMultiplier = saturate(1.0 - abs(tdData.x)) / 1.0; // Shore waves linearly fade in on the edges of SDF
	float depthMultiplier = saturate((WaveWorksShorelineParameters.GerstnerWavelength*0.5 + tdData.y)*0.5); // Shore waves fade in when depth is less than half the wave length, we use 0.25 as this parameter also allows shore waves to heighten as the depth decreases
	gerstnerMultiplierOut = distanceMultiplier * depthMultiplier;

	// initializing variables to be changed along summing up the waves
	float gerstnerWavelength = WaveWorksShorelineParameters.GerstnerWavelength;
	float gerstnerOmega = 2.0*3.141592 / WaveWorksShorelineParameters.GerstnerWavelength; // angular speed of gerstner wave
	float gerstnerParallelness = WaveWorksShorelineParameters.GerstnerParallelity; // "parallelness" of shore waves. 0 means the waves are parallel to shore, 1 means the waves are parallel to wind gradient
	float gerstnerSpeed = WaveWorksShorelineParameters.GerstnerSpeed; // phase speed of gerstner waves
	float gerstnerAmplitude = WaveWorksShorelineParameters.GerstnerAmplitude;
	float2 windDirection = WaveWorksShorelineParameters.WindDirection;

	// summing up the waves
	for (float i = 0.0; i < WaveWorksShorelineParameters.GerstnerWaves; i += 1.0)
	{
		float windPhase = dot(windDirection, posWS.xy);
		float gerstnerPhase = 2.0*3.141592*(lerp(sdfPhase, windPhase, gerstnerParallelness) / gerstnerWavelength);
		float2 propagationDirection = normalize(lerp(-tdData.zw + windDirection * 0.000001f, windDirection, gerstnerParallelness*gerstnerParallelness));
		float gerstnerGroupSpeedPhase = 2.0*3.141592*(lerp(sdfPhase, windPhase, gerstnerParallelness*3.0) / gerstnerWavelength);// letting the group speed phase to be non-parallel to propagation phase, so altering parallelness modificator fot this

		float groupSpeedMultiplier = 0.5 + 0.5*cos((gerstnerGroupSpeedPhase + gerstnerOmega*gerstnerSpeed*phaseShift / 2.0) / 2.7);	// Group speed for water waves is half of the phase speed, we allow 2.7 wavelengths to be in wave group, not so much as breaking shore waves lose energy quickly	
		float worldSpacePosMultiplier = 0.75 + 0.25*sin(phaseShift*0.3 + 0.5*posWS.x / gerstnerWavelength)*sin(phaseShift*0.4 + 0.5*posWS.y / gerstnerWavelength);// slowly crawling worldspace aligned checkerboard pattern that damps gerstner waves further
		float depthMultiplier = saturate((gerstnerWavelength*0.5 + tdData.y)*0.5);	// Shore waves fade in when depth is less than half the wave length
		float gerstnerMultiplier = distanceMultiplier * depthMultiplier * groupSpeedMultiplier * worldSpacePosMultiplier;// final scale factor applied to base Gerstner amplitude and used to mix between ocean waves and shore waves

		float steepness = WaveWorksShorelineParameters.GerstnerSteepness;
		float baseAmplitude = gerstnerMultiplier * gerstnerAmplitude;	//amplitude gradually increases as wave runs over shallower seabed	
		float breakerMultiplier = saturate((baseAmplitude*2.0*1.28 + tdData.y) / gerstnerAmplitude);// Wave height is 2*amplitude, a wave will start to break when it approximately reaches a water depth of 1.28 times the wave height, empirically: http://passyworldofmathematics.com/mathematics-of-ocean-waves-and-surfing/

		// calculating Gerstner offset
		float s, c;
		sincos(gerstnerPhase + gerstnerOmega*gerstnerSpeed*phaseShift, s, c);
		float waveVerticalOffset = s * baseAmplitude;
		offsetOut.z += waveVerticalOffset;
		offsetOut.xy += c * propagationDirection * steepness * baseAmplitude; // trochoidal Gerstner wave		
		offsetOut.xy -= propagationDirection * s * baseAmplitude * breakerMultiplier * 2.0;// adding wave forward skew due to its bottom slowing down, so the forward wave front gradually becomes vertical 
		float breakerPhase = gerstnerPhase + gerstnerOmega*gerstnerSpeed*phaseShift + 3.141592*0.05;
		float fp = frac(breakerPhase / (3.141592*2.0));
		offsetOut.xy -= 0.5*baseAmplitude*propagationDirection*breakerMultiplier*(saturate(fp*10.0) - saturate(-1.0 + fp*10.0));// moving breaking area of the wave further forward

		// updating the parameters for next wave
		gerstnerWavelength *= 0.66;
		gerstnerOmega /= 0.66;
		gerstnerSpeed *= 0.66;
		gerstnerAmplitude *= 0.66;
		gerstnerParallelness *= 0.66;
		windDirection.xy *= float2(-1.0, 1.0)*windDirection.yx; // rotating wind direction 

		// Adding vertical displacement as the wave increases while rolling on the shallow area
		offsetOut.z += baseAmplitude*1.2;
	}
}

// get gerstner wave's surface attributes
void GFSDK_WaveWorks_GetGerstnerSurfaceAttributes(
	float2 sdfUV,
	float2 posWS,
	out float3 normalOut,
	out float breakerOut,
	out float foamTrailOut
	)
{
	// initializing the outputs
	normalOut = float3(0.0, 0.0, 1.0);
	foamTrailOut = 0.0;
	breakerOut = 0.0;

	// getting SDF
	const float4 tdData = Texture2DSampleLevel(ShorelineDistanceFieldTexture, ShorelineDistanceFieldSampler, sdfUV, 0);

	// initializing variables common to all Gerstner waves
	float phaseShift = WaveWorksShorelineParameters.Time;

	uint3 ShorelineDFTextureSize;
	ShorelineDistanceFieldTexture.GetDimensions(0, ShorelineDFTextureSize.x, ShorelineDFTextureSize.y, ShorelineDFTextureSize.z);
	float kTopDownDataPixelsPerMeter = ShorelineDFTextureSize.x / WaveWorksShorelineParameters.ViewPortSize.x;
	float sdfPhase = tdData.x * WaveWorksShorelineParameters.MaxPixelsToShoreline / kTopDownDataPixelsPerMeter;
	float distanceMultiplier = saturate(1.0 - tdData.x); // Shore waves linearly fade in on the edges of SDF

	// initializing variables to be changed along summing up the waves
	float gerstnerWavelength = WaveWorksShorelineParameters.GerstnerWavelength;
	float gerstnerOmega = 2.0*3.141592 / WaveWorksShorelineParameters.GerstnerWavelength; // angular speed of gerstner wave
	float gerstnerParallelness = WaveWorksShorelineParameters.GerstnerParallelity; // "parallelness" of shore waves. 0 means the waves are parallel to shore, 1 means the waves are parallel to wind gradient
	float gerstnerSpeed = WaveWorksShorelineParameters.GerstnerSpeed; // phase speed of gerstner waves
	float gerstnerAmplitude = WaveWorksShorelineParameters.GerstnerAmplitude;
	float2 windDirection = WaveWorksShorelineParameters.WindDirection;

	// summing up the waves
	for (float i = 0.0; i < WaveWorksShorelineParameters.GerstnerWaves; i += 1.0)
	{
		float windPhase = dot(windDirection, posWS.xy);
		float gerstnerPhase = 2.0*3.141592*(lerp(sdfPhase, windPhase, gerstnerParallelness) / gerstnerWavelength);
		float2 propagationDirection = normalize(lerp(-tdData.zw + windDirection * 0.000001f, windDirection, gerstnerParallelness * gerstnerParallelness));
		float gerstnerGroupSpeedPhase = 2.0*3.141592*(lerp(sdfPhase, windPhase, gerstnerParallelness*3.0) / gerstnerWavelength); // letting the group speed phase to be non-parallel to propagation phase, so altering parallelness modificator fot this

		float groupSpeedMultiplier = 0.5 + 0.5*cos((gerstnerGroupSpeedPhase + gerstnerOmega*gerstnerSpeed*phaseShift / 2.0) / 2.7); // Group speed for water waves is half of the phase speed, we allow 2.7 wavelengths to be in wave group, not so much as breaking shore waves lose energy quickly
		float worldSpacePosMultiplier = 0.75 + 0.25*sin(phaseShift*0.3 + 0.5*posWS.x/gerstnerWavelength)*sin(phaseShift*0.4 + 0.5*posWS.y / gerstnerWavelength); // slowly crawling worldspace aligned checkerboard pattern that damps gerstner waves further
		float depthMultiplier = saturate((gerstnerWavelength*0.5 + tdData.y)*0.5); // Shore waves fade in when depth is less than half the wave length
		float gerstnerMultiplier = distanceMultiplier*depthMultiplier*groupSpeedMultiplier*worldSpacePosMultiplier; // final scale factor applied to base Gerstner amplitude and used to mix between ocean waves and shore waves

		float steepness = WaveWorksShorelineParameters.GerstnerSteepness;
		float baseAmplitude = gerstnerMultiplier * gerstnerAmplitude; //amplitude gradually increases as wave runs over shallower seabed

		// calculating normal
		float s, c;
		sincos(gerstnerPhase + gerstnerOmega*gerstnerSpeed*phaseShift, s, c);
		normalOut.z -= gerstnerOmega*steepness*baseAmplitude*s;
		normalOut.xy -= gerstnerOmega*baseAmplitude*c*propagationDirection;   // orienting normal according to direction of wave propagation. No need to normalize, it is unit length.

		// calculating foam parameters
		float breakerMultiplier = saturate((baseAmplitude*2.0*1.28 + tdData.y) / gerstnerAmplitude); // Wave height is 2*amplitude, a wave will start to break when it approximately reaches a water depth of 1.28 times the wave height, empirically: http://passyworldofmathematics.com/mathematics-of-ocean-waves-and-surfing/ 
		float foamTrailPhase = gerstnerPhase + gerstnerOmega*gerstnerSpeed*phaseShift + 3.141592*0.05; // delaying foam trail a bit so it's following the breaker
		float fp = frac(foamTrailPhase / (3.141592*2.0));
		foamTrailOut += gerstnerMultiplier*breakerMultiplier*(saturate(fp*10.0) - saturate(fp*1.1)); // only breaking waves leave foamy trails
		breakerOut += gerstnerMultiplier*breakerMultiplier*(saturate(fp*10.0) - saturate(-1.0 + fp*10.0)); // making narrow sawtooth pattern

		// updating the parameters for next wave
		gerstnerWavelength *= 0.66;
		gerstnerOmega /= 0.66;
		gerstnerSpeed *= 0.66;
		gerstnerAmplitude *= 0.66;
		gerstnerParallelness *= 0.66;
		windDirection.xy *= float2(-1.0, 1.0)*windDirection.yx; // rotating wind direction 
	}
}